import folium 
from streamlit_folium import st_folium
import streamlit as st
import pandas as pd
import requests
import json
from urllib.parse import quote

# page header
st.header("NYC Flood Vulnerability Index and Resiliency Projects")

base_url = "https://data.cityofnewyork.us/resource/mrjc-v9pm.csv?$query="
# Sample data for different years
sql_fshri = """SELECT `geoid`, `fshri` LIMIT 3000"""
df_fshri = pd.read_csv(base_url + quote(sql_fshri))

sql_sscur = """SELECT `geoid`, `ss_cur` 
WHERE `ss_cur` IS NOT NULL
ORDER BY `ss_cur` DESC NULL LAST
LIMIT 3000"""
df_sscur = pd.read_csv(base_url + quote(sql_sscur))

sql_ss50 = """SELECT `geoid`, `ss_50s` 
WHERE `ss_50s` IS NOT NULL
ORDER BY `ss_50s` DESC NULL LAST
LIMIT 3000"""
df_ss50 = pd.read_csv(base_url + quote(sql_ss50))

sql_ss80 = """SELECT `geoid`, `ss_80s` 
WHERE `ss_80s` IS NOT NULL
ORDER BY `ss_80s` DESC NULL LAST
LIMIT 3000"""
df_ss80 = pd.read_csv(base_url + quote(sql_ss80))

# # Sample GeoJSON data (polygons should be defined accordingly)
# sql_geo = """SELECT `geoid`, `the_geom` LIMIT 3000"""
# url = "https://data.cityofnewyork.us/resource/mrjc-v9pm.geojson?$query=" + quote(sql_geo)
# polygons = requests.get(url).json()

# now reading from a file:
with open("polygons.geojson") as jsonfile:
    polygons = json.load(jsonfile)

# Filter polygons for each dataset
geoids_sscur = df_sscur['geoid'].astype(str).tolist()
filtered_polygons_sscur = {
    "type": "FeatureCollection",
    "features": [feature for feature in polygons['features']
                 if feature['properties']['geoid'] in geoids_sscur]
}

geoids_ss50 = df_ss50['geoid'].astype(str).tolist()
filtered_polygons_ss50 = {
    "type": "FeatureCollection",
    "features": [feature for feature in polygons['features']
                 if feature['properties']['geoid'] in geoids_ss50]
}

geoids_ss80 = df_ss80['geoid'].astype(str).tolist()
filtered_polygons_ss80 = {
    "type": "FeatureCollection",
    "features": [feature for feature in polygons['features']
                 if feature['properties']['geoid'] in geoids_ss80]
}

# Dropdown for selecting the index
idx = st.selectbox('Select an Index:', ('FSHRI', 'FVI Storm Surge Current', 'FVI Storm Surge 2050', 'FVI Storm Surge 2080'))

# Create the map
m = folium.Map((40.7128, -74.0060), tiles="cartodb positron")

if idx == 'FSHRI':
    # Add FSHRI layer
    folium.Choropleth(
        geo_data=polygons,
        data=df_fshri,
        columns=["geoid", "fshri"],
        key_on="properties.geoid",
        fill_color='YlOrRd',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name="FSHRI Index",
        name="FSHRI",
        show=True
    ).add_to(m)
    
    # Add GeoJSON layer for tooltips with custom style
    folium.GeoJson(
        polygons,
        name="FSHRI",
        tooltip=folium.GeoJsonTooltip(fields=['geoid', 'project_count', 'total_proj_val'],
                aliases=['GEOID', '# of Projects', 'Total Values Invested ($)']),
                style_function=lambda x: {
            'fillColor': 'none',
            'color': 'transparent',
            'weight': 1,
            'opacity': 0.5
        }
    ).add_to(m)
    
elif idx == 'FVI Storm Surge 2050':
    # Add FVI Storm Surge 2050 layer with filtered polygons
    folium.Choropleth(
        geo_data=filtered_polygons_ss50,
        data=df_ss50,
        columns=["geoid", "ss_50s"],
        key_on="properties.geoid",
        fill_color='YlOrRd',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name="FVI Storm Surge Index 2050",
        name="FVI Storm Surge Index 2050",
        show=True
    ).add_to(m)
    
    # Add GeoJSON layer for tooltips with custom style
    folium.GeoJson(
        filtered_polygons_ss50,
        name="FVI Storm Surge Index 2050",
        tooltip=folium.GeoJsonTooltip(fields=['geoid', 'project_count', 'total_proj_val'],
                aliases=['GEOID', '# of Projects', 'Total Values Invested ($)']),
                style_function=lambda x: {
            'fillColor': 'none',
            'color': 'transparent',
            'weight': 1,
            'opacity': 0.5
        }
    ).add_to(m)

elif idx == 'FVI Storm Surge 2080':
    # Add FVI Storm Surge 2080 layer with filtered polygons
    folium.Choropleth(
        geo_data=filtered_polygons_ss80,
        data=df_ss80,
        columns=["geoid", "ss_80s"],
        key_on="properties.geoid",
        fill_color='YlOrRd',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name="FVI Storm Surge Index 2080",
        name="FVI Storm Surge Index 2080",
        show=True
    ).add_to(m)
    
    # Add GeoJSON layer for tooltips with custom style
    folium.GeoJson(
        filtered_polygons_ss80,
        name="FVI Storm Surge Index 2080",
        tooltip=folium.GeoJsonTooltip(fields=['geoid', 'project_count', 'total_proj_val'],
                aliases=['GEOID', '# of Projects', 'Total Values Invested ($)']),
                style_function=lambda x: {
            'fillColor': 'none',
            'color': 'transparent',
            'weight': 1,
            'opacity': 0.5
        }
    ).add_to(m)

else:
    # Add Current Storm Surge Index layer with filtered polygons
    folium.Choropleth(
        geo_data=filtered_polygons_sscur,
        data=df_sscur,
        columns=["geoid", "ss_cur"],
        key_on="properties.geoid",
        fill_color='YlOrRd',
        fill_opacity=0.7,
        line_opacity=0.2,
        legend_name="Current Storm Surge Index",
        name="Current Storm Surge Index",
        show=True
    ).add_to(m)
    
    # Add GeoJSON layer for tooltips with custom style
    folium.GeoJson(
        filtered_polygons_sscur,
        name="Current Storm Surge Index",
        tooltip=folium.GeoJsonTooltip(fields=['geoid', 'project_count', 'total_proj_val'],
                aliases=['GEOID', '# of Projects', 'Total Values Invested ($)']),
                style_function=lambda x: {
            'color': 'transparent',
            'fillColor': 'none',
            'weight': 1,
            'opacity': 0.5
        }
    ).add_to(m)

# Add layer control
folium.LayerControl(collapsed=True).add_to(m)

# Display the map in Streamlit
st_folium(m, width=700, height=500)
